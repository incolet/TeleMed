@page "/dashboard"
@using System.Security.Claims
@using TeleMed.Common.Extensions
@using TeleMed.DTOs.Appointment
@using TeleMed.Models

<PageTitle>Dashboard</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="row">
                <div class="col-md-6">
                    <h2>Welcome, @context.User.Identity!.Name</h2>
                    <p>This is your dashboard.</p>
                </div>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-header">Upcoming Appointments</div>
                        <Grid @ref="_grid"
                              TItem="AppointmentDto"
                              Class="table table-hover table-bordered table-striped"
                              DataProvider="AppointmentDataProvider"
                              AllowFiltering="true"
                              Responsive="true">

                            <GridColumn TItem="AppointmentDto" HeaderText="Provider Name" PropertyName="ProviderName" Context="appointmentContext">
                                @appointmentContext.ProviderName
                            </GridColumn>
                            <GridColumn TItem="AppointmentDto" HeaderText="Appointment Date" PropertyName="AppointmentDate" Context="appointmentContext">
                                @appointmentContext.AppointmentDate.ToLongDateString()
                            </GridColumn>
                            <GridColumn TItem="AppointmentDto" HeaderText="Appointment Time" PropertyName="AppointmentTime" Context="appointmentContext">
                                @appointmentContext.AppointmentTime
                            </GridColumn>
                            

                        </Grid>
                        @* <div class="card-body">
                            @if (_appointments.Any())
                            {
                                <!-- Display a list of upcoming appointments here -->

                                <ul class="list-group">
                                    @foreach (var appointment in _appointments){
                                        <li class="list-group-item">
                                            <div class="d-flex justify-content-between">
                                                <span>@appointment.ProviderName</span>
                                                <span>@appointment.AppointmentDate.ToLongDateString() at @appointment.AppointmentTime</span>
                                            </div>
                                        </li> 
                                    }
                                    <!-- Add more appointments as needed -->
                                </ul> 
                            }
                            else
                            {
                                <p>You have no upcoming appointments.</p>
                            }
                            
                        </div> *@
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">Book an Appointment</div>
                        <div class="card-body">
                            <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Book Now</Button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Appointment Modal -->
        <Modal @ref="_modal" Title="Book Appointment">
            <BodyTemplate>
                <div class="modal-body"> 
                        <div class="form-group">
                            <label>Select a Doctor</label>
                            @if (_providers.Any())
                            {
                                <InputSelect @bind-Value="_providerId" class="form-control">
                                    @foreach (var provider in _providers)
                                    {
                                        <option value="@provider.Id">@provider.FirstName, @provider.LastName</option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <InputSelect @bind-Value="_providerId" >
                                    <option value="">No Providers available</option>
                                </InputSelect>
                            }
                            
                        </div>
                        <div class="form-group">
                            <label>Select a Date</label>
                            <DateInput TValue="DateOnly" @bind-Value="@_appointmentDate" @onblur="DateChanged" Placeholder="Enter Date" />
                        </div>
                        
                        <div>
                            <label>Select a Time</label>
                            <InputSelect @bind-Value="_appointmentTime" class="form-control">
                                @if (_timeSlots.Any())
                                {

                                    @foreach (var timeSlot in _timeSlots)
                                    {
                                        <option value="@timeSlot.ToTimeString()">@timeSlot.ToTimeString()</option>
                                    }

                                }
                                else
                                {

                                    <option value="">No Time Slot available</option>

                                }
                            </InputSelect >
                        </div>
                        
                </div>
            </BodyTemplate>
            <FooterTemplate>
                <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                <Button Color="ButtonColor.Primary" @onclick="BookAppointment">Book</Button>
            </FooterTemplate>
        </Modal>
        
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized to access this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    Grid<AppointmentDto> _grid = default!;

    private ClaimsPrincipal? _user;
    private Modal? _modal;
    private List<AppointmentDto> _appointments = [];
    private List<Providers> _providers = [];
    
    private DateOnly _appointmentDate = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    private string _appointmentTime = "";
    private List<DateTime> _timeSlots = [];
    
    private int _providerId;
    
    
    private async Task OnShowModalClick()
    {
        await _modal?.ShowAsync()!;
    }

    private async Task OnHideModalClick()
    {
        await _modal?.HideAsync()!;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    
    // protected override async Task OnInitializedAsync()
    // {
    //     var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
    //     _user = (await customAuthStateProvider.GetAuthenticationStateAsync()).User;
    //     var patientId = _user.FindFirstValue(ClaimTypes.NameIdentifier); 
    //     _appointments = await AppointmentsService.GetAppointmentsByPatientId(int.Parse(patientId ?? "0"));
    //     _providers = await ProvidersService.GetProviders();
    // }
    
    private void DateChanged()
    {
        _timeSlots = AppointmentsService.GetAvailableAppointmentTimes(_providerId,_appointmentDate.ToString("yyyy-MM-dd")).Result;
    }
    
    private async Task BookAppointment()
    {
        var data = new AppointmentDto
        {
            PatientId = int.Parse(_user?.FindFirstValue(ClaimTypes.NameIdentifier) ?? "0"),
            ProviderId = _providerId,
            AppointmentDate = new DateTime(_appointmentDate.Year, _appointmentDate.Month, _appointmentDate.Day),
            AppointmentTime = _appointmentTime
        };

        var result = AppointmentsService.CreateAppointment(data).Result;
        
        if (result.Flag)
        {
            await _modal?.HideAsync()!;
            _appointments = await AppointmentsService.GetAppointmentsByPatientId(int.Parse(_user?.FindFirstValue(ClaimTypes.NameIdentifier) ?? "0"));
        }
        else
        {
            // Show error message
            await js.InvokeVoidAsync("alert", result.Message);
        }
    }

    private async Task<GridDataProviderResult<AppointmentDto>> AppointmentDataProvider(GridDataProviderRequest<AppointmentDto> request)
    {
        if (_appointments.Count > 0) return await Task.FromResult(request.ApplyTo(_appointments));
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        _user = (await customAuthStateProvider.GetAuthenticationStateAsync()).User;
        var patientId = _user.FindFirstValue(ClaimTypes.NameIdentifier);
        _appointments = await AppointmentsService.GetAppointmentsByPatientId(int.Parse(patientId ?? "0"));
        _providers = await ProvidersService.GetProviders();

        return await Task.FromResult(request.ApplyTo(_appointments));
    }

}