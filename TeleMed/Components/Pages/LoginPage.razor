
@page "/login"

@rendermode InteractiveServer
<div class="container ">
    <div class="row justify-content-md-center d-flex align-items-center">
        <div class="col-md-auto">
            <EditForm Model="@Login" OnValidSubmit="LoginClicked">
                <DataAnnotationsValidator />
                <div class="row mb-3">
                    <label class="col-sm-2 col-md-3 col-form-label">Email Address</label>
                    <div class="col-sm-10 col-md-9">
                        <InputText @bind-Value="Login.Email" class="form-control"></InputText>
                    </div>
                </div>
                <div class="row mb-3">
                    <label class="col-sm-2 col-md-3 col-form-label">Password</label>
                    <div class="col-sm-10 col-md-9">
                        <InputText @bind-Value="Login.Password" class="form-control"></InputText>
                    </div>
                </div>

                <div class="row justify-content-md-center">
                    <button type="submit" class="btn btn-primary">Sign in</button>
                </div>
                <ValidationSummary />
            </EditForm>
        </div>
    </div>
</div>



@code {
    public LoginDTO Login { get; set; } = new LoginDTO();

    private async void LoginClicked()
    {
        LoginResponse response = await AccountService.LoginAsync(Login);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            return;
        }
        
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
        NavManager.NavigateTo("/",forceLoad: true);
    }
}
