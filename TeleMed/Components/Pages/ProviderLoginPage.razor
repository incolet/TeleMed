@page "/provider-login"
@using TeleMed.Components.Layout
@layout LoginLayout
@using TeleMed.DTOs.Auth

@rendermode InteractiveServer

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg p-3 mb-5 bg-white rounded">
                <div class="card-body">
                    <h3 class="text-center mb-4">Provider Log In</h3>
                    <EditForm Model="@Login" OnValidSubmit="LoginClicked">
                        <DataAnnotationsValidator />
                        <div class="form-group mb-3">
                            <label for="emailInput" class="form-label">Email Address</label>
                            <InputText id="emailInput" @bind-Value="Login.Email" class="form-control" placeholder="Enter email" />
                            <ValidationMessage For="@(() => Login.Email)" class="text-danger" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="passwordInput" class="form-label">Password</label>
                            <InputText id="passwordInput" @bind-Value="Login.Password" class="form-control" type="password" placeholder="Password" />
                            <ValidationMessage For="@(() => Login.Password)" class="text-danger" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Sign in</button>
                    </EditForm>
                    <Spinner Class="me-3" Type="SpinnerType.Dots" Color="SpinnerColor.Primary" Size="SpinnerSize.Large" Visible="@_spinnerVisible" />
                </div>

                <Button Type="ButtonType.Link" To="/" Color="ButtonColor.Primary" Size="Size.Small">Patient SignIn</Button>
            </div>
        </div>
    </div>
</div>




@code {
    public LoginDto Login { get; set; } = new ();
    private bool _spinnerVisible;
    private async void LoginClicked()
    {
        _spinnerVisible = true;
        Login.Role = (int)UserRoles.Provider;
        
        var response = await AccountsService.LoginAsync(Login);
        if (!response.Flag)
        {
            await js.InvokeVoidAsync("alert", response.Message);
            _spinnerVisible = false;
            return;
        }
        
        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        customAuthStateProvider.UpdateAuthenticationState(response.JWTToken);
        NavManager.NavigateTo("/provider-dashboard",forceLoad: true);
    }
}
